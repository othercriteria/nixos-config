---
description: Standards for managing secrets with git-secret in the NixOS configuration
globs: ["**/secrets/**", "**/*.nix"]
alwaysApply: false
---
# Secrets Management

Guidelines for creating, updating, and deleting secrets using git-secret.

<rule>
name: secrets_management
description: Standards for managing secrets using git-secret in the NixOS configuration
filters:
  - type: intent
    pattern: "(?i)\\b(secret|password|credential|token|key)\\b"
  - type: content
    pattern: "(?i)\\b(create|add|update|modify|delete|remove)\\s+(secret|password|credential|token|key)\\b"
  - type: file
    pattern: "^secrets/.*"
  - type: content
    pattern: "passwordFile|keyFile|secretFile|secretPath|auth_password_file"

actions:
  - type: suggest
    message: |
      ## Secrets Management

      This project uses git-secret for managing sensitive information:

      1. All secrets are stored in the `secrets/` directory
      2. Secret files are referenced from Nix configurations using paths like `/etc/nixos/secrets/<filename>`
      3. Secrets are encrypted before committing to the repository
      4. Pre-commit hooks automatically encrypt secrets before commits

      ### Creating a new secret

      1. Create the secret file in the `secrets/` directory:
         ```zsh
         echo "your-secret-content" > secrets/your-new-secret
         ```

      2. Add it to git-secret tracking:
         ```zsh
         git secret add secrets/your-new-secret
         ```

      3. Update your NixOS configuration to reference the secret:
         - For direct file references: `passwordFile = "/etc/nixos/secrets/your-new-secret";`
         - For environment variables: Add to shell init (see `home/zsh.nix` for example)

      4. Hide all tracked secrets (required before committing):
         ```zsh
         git secret hide
         ```

      5. Add both the original and encrypted files to git tracking:
         ```zsh
         git add secrets/your-new-secret.secret
         git add .gitignore # git-secret adds your file to .gitignore automatically
         ```

      ### Updating a secret

      1. Ensure secrets are revealed:
         ```zsh
         make reveal-secrets
         ```

      2. Edit the secret file:
         ```zsh
         nano secrets/your-secret-file
         ```

      3. Hide all secrets:
         ```zsh
         git secret hide
         ```

      4. Commit the updated encrypted file:
         ```zsh
         git add secrets/your-secret-file.secret
         git commit -m "update: update secret file"
         ```

      ### Deleting a secret

      Before removing a secret, ensure it's not used in the configuration:

      1. Search for secret usage:
         ```zsh
         grep -r "your-secret-file" --include="*.nix" .
         ```

      2. Update or remove any configurations that reference the secret

      3. Remove the secret from git-secret tracking:
         ```zsh
         git secret remove secrets/your-secret-file
         ```

      4. Delete the original and encrypted files:
         ```zsh
         rm secrets/your-secret-file secrets/your-secret-file.secret
         ```

      5. Update .gitignore (git-secret modified it):
         ```zsh
         git add .gitignore
         git commit -m "chore: remove secret file"
         ```

  - type: reject
    conditions:
      - pattern: "(?i)(echo|printf).*\\b(password|secret|token|key|credential)\\b.*>(?!.*secrets/)"
        message: "Secrets must be stored in the secrets/ directory"
      - pattern: "(?i)\\bgit\\s+add\\s+secrets/[^.]+"
        message: "Don't commit unencrypted secrets. Use 'git secret add' first, then 'git secret hide'"

criteria:
  required:
    - All secrets stored in secrets/ directory
    - Secrets properly encrypted with git-secret
    - Secrets referenced from configuration using appropriate paths
    - Pre-commit hooks enabled to protect secrets
    - Secrets have proper permissions (600) when revealed

examples:
  - input: "How do I create a new API key for the system?"
    output: |
      To create a new API key secret:

      1. Create the secret file:
         ```zsh
         echo "your-api-key" > secrets/my-api-key
         ```

      2. Add to git-secret and encrypt it:
         ```zsh
         git secret add secrets/my-api-key
         git secret hide
         ```

      3. Reference it in your configuration:
         ```nix
         { config, ... }:
         {
           services.myService = {
             apiKeyFile = "/etc/nixos/secrets/my-api-key";
           };
         }
         ```

      4. Commit the encrypted version:
         ```zsh
         git add secrets/my-api-key.secret .gitignore
         git commit -m "feat: add API key for myService"
         ```

  - input: "How do I update the Protonmail password?"
    output: |
      To update the Protonmail password:

      1. Make sure secrets are revealed:
         ```zsh
         make reveal-secrets
         ```

      2. Edit the secret file:
         ```zsh
         nano secrets/dlk-protonmail-password
         ```

      3. Encrypt all secrets:
         ```zsh
         git secret hide
         ```

      4. Commit the change:
         ```zsh
         git add secrets/dlk-protonmail-password.secret
         git commit -m "config: update Protonmail password"
         ```

metadata:
  priority: high
  version: 1.0
</rule>
