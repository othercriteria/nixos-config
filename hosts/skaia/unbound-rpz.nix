{ config, lib, pkgs, ... }:

let
  updateScript = pkgs.writeShellScript "update-unbound-rpz" ''
    		set -euo pipefail
    		WORKDIR=/var/lib/unbound
    		OUTFILE="$WORKDIR/rpz-local-zones.conf"
    		TMPFILE="$OUTFILE.tmp"
    		mkdir -p "$WORKDIR"

    		echo "# Generated by unbound-rpz-update $(date -u +%FT%TZ)" > "$TMPFILE"

    		# Fetch StevenBlack hosts list
    		${pkgs.curl}/bin/curl -fsSL \
    			https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts \
    			| ${pkgs.gnugrep}/bin/grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\s' \
    			| ${pkgs.gawk}/bin/awk '{print $2}' \
    			| ${pkgs.gnused}/bin/sed -E 's/#.*$//' \
    			| ${pkgs.gnugrep}/bin/grep -Ev '^(localhost|localhost\.|localdomain|broadcasthost)$' \
    			| ${pkgs.gnugrep}/bin/grep -Ev '\.local$' \
    			| ${pkgs.coreutils}/bin/sort -u \
    			| ${pkgs.gawk}/bin/awk '{ printf("local-zone: \"%s\" always_nxdomain\n", $0) }' \
    			>> "$TMPFILE"

    		${pkgs.coreutils}/bin/mv -f "$TMPFILE" "$OUTFILE"
    		${pkgs.coreutils}/bin/chmod 0644 "$OUTFILE"
    	'';
in
{
  systemd = {
    services = {
      unbound-rpz-update = {
        description = "Update Unbound RPZ (local-zone) blocklist";
        serviceConfig = {
          Type = "oneshot";
          ExecStart = updateScript;
          User = "root";
          Group = "root";
          PermissionsStartOnly = true;
        };
        wantedBy = [ "multi-user.target" ];
      };

      # Ensure Unbound consumes the generated RPZ and waits for it on start
      unbound = {
        after = [ "unbound-rpz-update.service" ];
        requires = [ "unbound-rpz-update.service" ];
      };
    };

    timers = {
      unbound-rpz-update = {
        wantedBy = [ "timers.target" ];
        timerConfig = {
          OnBootSec = "10min";
          OnUnitActiveSec = "24h";
          Unit = "unbound-rpz-update.service";
        };
      };
    };
  };

  # Add include for the generated RPZ file
  services.unbound.settings.server.include = "/var/lib/unbound/rpz-local-zones.conf";
}
